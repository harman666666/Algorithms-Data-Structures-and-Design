########################## DESIGN CIRCULAR BIDIRECTIONAL LINKED LIST ############################

class Node:
    def __init__(self, v, p=None, n=None):
        self.val = v
        self.prev = p
        self.next = n

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.key = Node(-1)
        self.key.prev = self.key.next = self.key

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. 
        If the index is invalid, return -1.

        """
        i, node = 0, self.key.next
        while i < index and node != self.key:
            node = node.next
            i += 1
        return node.val if index >= 0 else -1

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. 
        After the insertion, the new node will be the first node of the linked list.
        """
        self.key.next.prev = self.key.next = Node(val, p=self.key, n=self.key.next)

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        self.key.prev.next = self.key.prev = Node(val, p=self.key.prev, n=self.key)

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. 
        If index equals to the length of linked list, the node will be appended 
        to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        index = max(0, index)
        i, node = 0, self.key.next
        while i < index and node != self.key:
            node = node.next
            i += 1
        if node != self.key or i == index:
            node.prev.next = node.prev = Node(val, p=node.prev, n=node)

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index < 0: return
        i, node = 0, self.key.next
        while i < index and node != self.key:
            node = node.next
            i += 1
        if node != self.key:
            node.prev.next = node.next
            node.next.prev = node.prev
            del node


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)


########################## HASH MAP AND HASH SET NOTES ###############################3

How to handle Collisions?
There are mainly two methods to handle collision:
1) Separate Chaining
2) Open Addressing


Seperate Chaining >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.: 

The bucket chains are often searched sequentially using the order 
the entries were added to the bucket. If the load factor is large 
and some keys are more likely to come up than others, then rearranging 
the chain with a move-to-front heuristic may be effective. More sophisticated data structures, 
such as balanced search trees, are worth considering only if the load factor is large (about 10 or more), 
or if the hash distribution is likely to be very non-uniform, or if one must guarantee good performance 
even in a worst-case scenario. However, using a larger table and/or a 
better hash function may be even more effective in those cases.



Advantages:
1) Simple to implement.
2) Hash table never fills up, we can always add more elements to the chain.
3) Less sensitive to the hash function or load factors.
4) It is mostly used when it is unknown how many and how frequently keys may be inserted or deleted.

Disadvantages:
1) Cache performance of chaining is not good as keys are stored using a linked list. 
    Open addressing provides better cache performance as everything is stored in the same table.
2) Wastage of Space (Some Parts of hash table are never used)
3) If the chain becomes long, then search time can become O(n) in the worst case.
4) Uses extra space for links.

Implementing hash table using Chaining through Doubly Linked List is similar to 
implementing Hashtable using Singly Linked List. The only difference is that every 
node of Linked List has the address of both, the next and the previous node. This 
will speed up the process of adding and removing elements from the list, hence the 
time complexity will be reduced drastically.


Open addressing >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.:
Well-known probe sequences include:
Linear probing, in which the interval between probes is fixed (usually 1)

Quadratic probing, in which the interval between probes is increased by adding the 
successive outputs of a quadratic polynomial to the 
starting value given by the original hash computation

Double hashing, in which the interval between probes is computed by a second hash function
Double hashing is a collision resolving technique in Open Addressed Hash tables. 
Double hashing uses the idea of applying a second hash function to key when a collision occurs.

Double hashing can be done using :
(hash1(key) + i * hash2(key)) % TABLE_SIZE
Here hash1() and hash2() are hash functions and TABLE_SIZE
is size of hash table.

(We repeat by increasing i when collision occurs)
First hash function is typically hash1(key) = key % TABLE_SIZE

A popular second hash function is : hash2(key) = PRIME – (key % PRIME) where PRIME is a prime smaller than the TABLE_SIZE.

A good second Hash function is:
    - It must never evaluate to zero
    - Must make sure that all cells can be probed

A drawback of all these open addressing schemes is that the number of stored entries cannot 
exceed the number of slots in the bucket array. In fact, even with good hash functions, 
their performance dramatically degrades when the load factor grows beyond 0.7 or so. 
For many applications, these restrictions mandate the use of dynamic resizing, 
with its attendant costs.


Open addressing schemes also put more stringent requirements on the hash function: 
besides distributing the keys more uniformly over the buckets, the function must also 
minimize the clustering of hash values that are consecutive in the probe order. Using 
separate chaining, the only concern is that too many objects map to the same hash value; 
whether they are adjacent or nearby is completely irrelevant.[citation needed]

Open addressing only saves memory if the entries are small (less than four times the size of a pointer) 
and the load factor is not too small. If the load factor is close to zero (that is, there are far more 
buckets than stored entries), open addressing is wasteful even if each entry is just two words.

This graph compares the average number of cache misses 
required to look up elements in tables with chaining 
and linear probing. As the table passes the 80%-full mark, 
linear probing's performance drastically degrades.

Open addressing avoids the time overhead of allocating each new entry record, and 
can be implemented even in the absence of a memory allocator. It also avoids the extra 
indirection required to access the first entry of each bucket (that is, usually the only one). 
It also has better locality of reference, particularly with linear probing. With small record sizes, 
these factors can yield better performance than chaining, particularly for lookups. Hash tables with 
open addressing are also easier to serialize, because they do not use pointers.[citation needed]

On the other hand, normal open addressing is a poor choice for large elements, because these 
elements fill entire CPU cache lines (negating the cache advantage), and a large amount of space 
is wasted on large empty table slots. If the open addressing table only stores references to 
elements (external storage), it uses space comparable to chaining even for large records 
but loses its speed advantage.[citation needed]

>>>>>>>>>>>>>>(TODO) talk about Coalesced hashing

>>>>>>>>>>>>>>>>>>> CUCKOO HASHING

>>>>>>>>>>>>>>> HOPSCOTCH HASHING


>>>>>>>>>>>>>>>> ROBIN HOOD HASHING

>>>>>>>>>>>>>>>> TWO CHOICE HASHING

2-choice hashing employs two different hash functions, h1(x) and h2(x), 

for the hash table. Both hash functions are used to compute two table locations. 
When an object is inserted in the table, it is placed in the table location that 
contains fewer objects (with the default being the h1(x) table location if there 
is equality in bucket size). 2-choice hashing employs the principle of 
the power of two choices.[25]

######################## LOAD FACTOR AND REHASHING #################################

How hashing works:

For insertion of a key(K) – value(V) pair into a hash map, 2 steps are required:

K is converted into a small integer (called its hash code) using a hash function.

The hash code is used to find an index (hashCode % arrSize) and the entire linked list 
at that index(Separate chaining) is first searched for the presence of the K already.

If found, it’s value is updated and if not, the K-V pair is stored as a new node in the list.
Complexity and Load Factor

For the first step, time taken depends on the K and the hash function.
For example, if the key is a string “abcd”, then it’s hash function may depend 
on the length of the string. But for very large values of n, the number of entries 
into the map, length of the keys is almost negligible in comparison to n so hash 
computation can be considered to take place in constant time, i.e, O(1).

For the second step, traversal of the list of K-V pairs present at that index needs to be done. 
For this, the worst case may be that all the n entries are at the same index. 
So, time complexity would be O(n). But, enough research has been done to make 
hash functions uniformly distribute the keys in the array so this almost never happens.

So, on an average, if there are n entries and b is the size of the array 
there would be n/b entries on each index. This value n/b is called the 
load factor that represents the load that is there on our map.

This Load Factor needs to be kept low, so that number of entries at 
one index is less and so is the complexity almost constant, i.e., O(1).

Rehashing:

As the name suggests, rehashing means hashing again. 
Basically, when the load factor increases to more than its pre-defined value 
(default value of load factor is 0.75), the complexity increases. So to overcome this, 
the size of the array is increased (doubled) and all the values are hashed again and 
stored in the new double sized array to maintain a low load factor and low complexity.

Why rehashing?

Rehashing is done because whenever key value pairs are inserted into the map, 
the load factor increases, which implies that the time complexity also increases 
as explained above. This might not give the required time complexity of O(1).

Hence, rehash must be done, increasing the size of the bucketArray so 
as to reduce the load factor and the time complexity.

How Rehashing is done?

Rehashing can be done as follows:

For each addition of a new entry to the map, check the load factor.
If it’s greater than its pre-defined value (or default value of 0.75 if not given), then Rehash.
For Rehash, make a new array of double the previous size and make it the new bucketarray.
Then traverse to each element in the old bucketArray and call the insert() for each so as to insert it into the new larger bucket array.

########################### HASH SET ################### (OPEN ADDRESSING SOLUTION)

This implementation was based on some data structures concepts 
and what I've read about Python's dict implementation.

The underlying structure that my hash set uses is a list. The list simply contains 
a key at the index the key is hashed to, unless there are multiple keys 
at the same index (ie a collision). More on that later...

My hashset is designed to use a limited amount of memory, but expands itself by a factor of 2 
when the load factor (size divided by array spots) exceeds 2/3. 
This will allow for O(1) operations on average. The downside to this is that every time the 
hashset doubles, it has to create a new list and rehash every element which takes O(n) each time. 
The average time will be O(1) for each add call as the cost of rehashing the set is amortized over the calls.

Open addressing and chaining each have their own advantages and disadvantages. I'm not 
going to explain the nuances of the methods, but know that chaining hash sets/tables 
have the head of a linked list of keys in each array spot, 
while open addressing just moves the key to an empty index.

I used open addressing for this problem. If we add an element that is hashed to the same 
index as another key, then we apply a secondary operation on the index until we 
find an empty spot (or a previously removed spot). This is called double hashing.
The formula I used is similar to that of the Python dict implementation, 
but without the perturb part. This is better than linear probing since the 
hash function (which just mods the key by the capacity of the list) is likely 
to fill contiguous array spots and double hashing makes the probability 
of finding an empty spot more uniform in those cases than linear probing.

For removing, the removed element is replaced by a tombstone so that 
the contains function won't get messed up when the path to an existing 
element has an empty spot in it, causing the contains function to return 
false. The add function will know that 
tombstones are able to be replaced by new elements.

class MyHashSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.capacity = 8
        self.size = 0
        self.s = [None]*8
        self.lf = float(2)/3
        
    def myhash(self, key): # can be modified to hash other hashable objects like built in python hash function
        return key%self.capacity
        

    def add(self, key):
        """
        :type key: int
        :rtype: void
        """
        if float(self.size)/self.capacity >= self.lf:
            self.capacity <<= 1
            ns = [None]*self.capacity
            for i in range(self.capacity >> 1):
                if self.s[i] and self.s[i] != "==TOMBSTONE==":
                    n = self.myhash(self.s[i])
                    while ns[n] is not None:
                        n = (5*n+1)%self.capacity
                    ns[n] = self.s[i]
            self.s = ns
        h = self.myhash(key)
        while self.s[h] is not None:
            if self.s[h] == key:
                return
            h = (5*h + 1) % self.capacity
            if self.s[h] == "==TOMBSTONE==":
                break
        self.s[h] = key
        self.size += 1
        
        

    def remove(self, key):
        """
        :type key: int
        :rtype: void
        """
        h = self.myhash(key)
        while self.s[h]:
            if self.s[h] == key:
                self.s[h] = "==TOMBSTONE=="
                self.size -= 1
                return
            h = (5*h+1)%self.capacity
        

    def contains(self, key):
        """
        Returns true if this set contains the specified element
        :type key: int
        :rtype: bool
        """
        h = self.myhash(key)
        while self.s[h] is not None:
            if self.s[h] == key:
                return True
            h = (5*h + 1)%self.capacity
        return False


##################################3 HASH MAP ################################### (OPEN CHAINING)
### THIS SOLUTION SHOULD USE LOAD FACTORS! => LIKE THE SOLUTION ABOVE.


# using just arrays, direct access table
# using linked list for chaining

class ListNode:
    def __init__(self, key, val):
        self.pair = (key, val)
        self.next = None

class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.m = 1000;
        self.h = [None]*self.m
        

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        index = key % self.m
        if self.h[index] == None:
            self.h[index] = ListNode(key, value)
        else:
            cur = self.h[index]
            while True:
                if cur.pair[0] == key:
                    cur.pair = (key, value) #update
                    return
                if cur.next == None: break
                cur = cur.next
            cur.next = ListNode(key, value)
        

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        index = key % self.m
        cur = self.h[index]
        while cur:
            if cur.pair[0] == key:
                return cur.pair[1]
            else:
                cur = cur.next
        return -1
            
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        index = key % self.m
        cur = prev = self.h[index]
        if not cur: return
        if cur.pair[0] == key:
            self.h[index] = cur.next
        else:
            cur = cur.next
            while cur:
                if cur.pair[0] == key:
                    prev.next = cur.next
                    break
                else:
                    cur, prev = cur.next, prev.next
                


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)

###########################################################################################################################
################################# CIRCULAR DEQUE:

