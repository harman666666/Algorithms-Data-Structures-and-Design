So, here is the four-step method for proving NP-completeness of a decision problem B. Memorize this technique -- it's very important!

1. Prove B is in NP by describing the polynomial-time verifier V that verifies "yes" instances of B. What is the certificate? How is it verified?

2. Select a problem A that you already know to be NP-hard or NP-complete. Usually this is a problem that is related to B in some way.

3. Reduce A to B: design a function f that maps all instances x of A to instances y = f(x) of B, such that the answer on x is always the same as the answer on y, and justify your construction.

4. Argue that if an instance x was in A, then f(x) ∈ B. (DONT HAVE TO DO THIS?)

5. Argue that if f(x) ∈ B then x ∈ A. (DONT HAVE TO DO THIS?)

6. Briefly explain why is f computable in polytime.

Some points that sometimes confuse students:

We do not require that every single possible instance of B gets mapped to by the function f.
Nor do we require that different x's must necessarily map to different y's
However, every possible instance -- whether a "yes" or "no" instance -- of problem A 
must have an image under f, and the answer for instance x of A must always be 
the same as for the instance f(x) of B.
When dealing with NP-complete problems, the function f you design should, 
generally speaking, not depend on whether x is a "yes" instance or "no" 
instance of problem A. This is because deciding this, in general, is 
probably not doable in polynomial time. So if f is to be poly-time 
computable, you're in trouble if your f depends on knowing this.



################################################################################3
OBSERVATION 2: WAYS TO PROVE:

Prove it is NP Hard

This involves getting a known NP-complete problem like SAT, the set of boolean expressions in the form:

(A or B or C) and (D or E or F) and ...
where the expression is satisfiable, that is there exists some setting for these booleans, which makes the expression true.

Then reduce the NP-complete problem to your problem in polynomial time.

That is, given some input X for SAT (or whatever NP-complete problem you are using), create some input Y for your problem, such that X is in SAT if and only if Y is in your problem. The function f : X -> Y must run in polynomial time.

In the example above, the input Y would be the graph G and the size of the vertex cover k.

For a full proof, you'd have to prove both:

that X is in SAT => Y in your problem
and Y in your problem => X in SAT.
marcog's answer has a link with several other NP-complete problems you could reduce to your problem.

Footnote: In step 2 (Prove it is NP-hard), reducing another NP-hard (not necessarily NP-complete) problem to the current problem will do, since NP-complete problems are a subset of NP-hard problems (that are also in NP).


####################################################################################3
OBSERVATION 3:


In order to prove that a problem L is NP-complete, we need to do the following steps:

Prove your problem L belongs to NP (that is that given a solution you can verify it in polynomial time)

Select a known NP-complete problem L'

Describe an algorithm f that transforms L' into L

Prove that your algorithm is correct (formally: x ∈ L' if and only if f(x) ∈ L )

Prove that algo f runs in polynomial time








